name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de pruebas y análisis de código
  test:
    name: Tests & Code Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache dependencias
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configurar variables de entorno para tests
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "API_KEY=test-api-key" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV

    - name: Ejecutar linting
      run: |
        # Instalar herramientas de linting
        pip install flake8 black isort mypy
        # Ejecutar black (formatter) - aplicar formato automáticamente
        black src/ tests/ app.py
        # Ejecutar isort (import sorter) - aplicar ordenamiento automáticamente  
        isort src/ tests/ app.py
        # Ejecutar flake8 (linter) solo en archivos Python usando configuración .flake8
        flake8 src/ tests/ app.py

    # - name: Ejecutar análisis de tipos con mypy
    #   run: |
    #     mypy src/ app.py --ignore-missing-imports --exclude tests/

    - name: Ejecutar tests unitarios
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Ejecutar tests de integración
      run: |
        pytest tests/integration/ -v

    - name: Subir cobertura de código
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job de seguridad - Comentado temporalmente por problemas con comandos deprecados
  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - name: Checkout código
  #     uses: actions/checkout@v4

  #   - name: Configurar Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.11'

  #   - name: Instalar dependencias
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install safety bandit

  #   - name: Verificar vulnerabilidades en dependencias
  #     run: |
  #       safety check -r requirements.txt

  #   - name: Análisis de seguridad del código
  #     run: |
  #       bandit -r src/ -f json -o bandit-report.json || true
  #       bandit -r src/

  #   - name: Subir reporte de seguridad
  #     uses: actions/upload-artifact@v4
  #     if: always()
  #     with:
  #       name: security-report
  #       path: bandit-report.json

  # Job de construcción y push de imagen Docker
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login al Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extraer metadatos
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Construir y push imagen Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Job de despliegue en staging - Comentado temporalmente
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [build-and-push]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   environment: staging
  #   
  #   steps:
  #   - name: Checkout código
  #     uses: actions/checkout@v4

  #   - name: Configurar Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Login al Container Registry
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ${{ env.REGISTRY }}
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Desplegar en staging
  #     run: |
  #       # Aquí irían los comandos para desplegar en el entorno de staging
  #       # Por ejemplo, usando kubectl, docker-compose, o servicios como Heroku
  #       echo "Desplegando en staging..."
  #       echo "Imagen: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

  #   - name: Ejecutar tests de smoke en staging
  #     run: |
  #       # Esperar a que la aplicación esté lista
  #       sleep 30
  #       # Ejecutar tests básicos de salud
  #       curl -f ${{ secrets.STAGING_URL }}/health || exit 1

  # Job de despliegue en producción - Comentado temporalmente
  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [deploy-staging]
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   environment: production
  #   
  #   steps:
  #   - name: Checkout código
  #     uses: actions/checkout@v4

  #   - name: Configurar Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Login al Container Registry
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ${{ env.REGISTRY }}
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Desplegar en producción
  #     run: |
  #       # Aquí irían los comandos para desplegar en producción
  #       echo "Desplegando en producción..."
  #       echo "Imagen: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

  #   - name: Ejecutar tests de smoke en producción
  #     run: |
  #       # Esperar a que la aplicación esté lista
  #       sleep 30
  #       # Ejecutar tests básicos de salud
  #       curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1

  #   - name: Notificar despliegue exitoso
  #     run: |
  #       echo "Despliegue en producción completado exitosamente"
  #       # Aquí se podría agregar notificación a Slack, Teams, etc.
