version: '3.8'

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-tracking_db}
      POSTGRES_USER: ${POSTGRES_USER:-tracking_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-tracking_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-tracking_user} -d ${POSTGRES_DB:-tracking_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    ports:
      - "${APP_PORT:-8000}:5000"
    environment:
      - FLASK_ENV=${FLASK_ENV:-development}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-tracking_user}:${POSTGRES_PASSWORD:-tracking_password}@db:5432/${POSTGRES_DB:-tracking_db}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - API_KEY=${API_KEY:-test-api-key}
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    command: ${APP_COMMAND:-flask run --host=0.0.0.0 --port=5000}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - FLASK_ENV=${FLASK_ENV:-development}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-tracking_user}:${POSTGRES_PASSWORD:-tracking_password}@db:5432/${POSTGRES_DB:-tracking_db}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - API_KEY=${API_KEY:-test-api-key}
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    command: celery -A src.infrastructure.external.celery_config worker --loglevel=info --queues=celery,checkpoints,notifications --concurrency=2 --max-tasks-per-child=1000
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "celery", "-A", "src.infrastructure.external.celery_config", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    driver: bridge
