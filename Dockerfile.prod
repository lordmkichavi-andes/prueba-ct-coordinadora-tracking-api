# Dockerfile optimizado para producción
FROM python:3.11-slim as builder

# Instalar dependencias del sistema para compilación
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Crear directorio de trabajo
WORKDIR /app

# Copiar requirements y instalar dependencias de Python
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Imagen final optimizada para producción
FROM python:3.11-slim

# Instalar solo dependencias de runtime
RUN apt-get update && apt-get install -y \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Crear usuario no-root para seguridad
RUN useradd --create-home --shell /bin/bash --uid 1000 app

# Copiar dependencias de Python desde el builder
COPY --from=builder /root/.local /home/app/.local

# Configurar PATH para el usuario
ENV PATH=/home/app/.local/bin:$PATH

# Establecer directorio de trabajo
WORKDIR /app

# Copiar código fuente
COPY --chown=app:app . .

# Cambiar al usuario no-root
USER app

# Variables de entorno para optimización de producción
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV FLASK_ENV=production
ENV FLASK_DEBUG=False

# Exponer puerto
EXPOSE 5000

# Health check más robusto para producción
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Comando optimizado para producción con más workers
CMD ["gunicorn", \
     "--bind", "0.0.0.0:5000", \
     "--workers", "8", \
     "--worker-class", "gevent", \
     "--worker-connections", "1000", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--preload", \
     "--timeout", "30", \
     "--keepalive", "2", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "--log-level", "info", \
     "app:create_app()"]
